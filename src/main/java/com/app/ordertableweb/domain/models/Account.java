package com.app.ordertableweb.domain.models;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Base64;
import java.sql.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Set;

import javax.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Immutable;
import org.hibernate.annotations.Subselect;
import org.hibernate.annotations.Synchronize;
import org.springframework.validation.annotation.Validated;
import com.app.ordertableweb.domain.utils.ByteConverter;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.springframework.format.annotation.DateTimeFormat;
import com.app.ordertableweb.domain.utils.StringConverter;

@Entity
@Table(name = "account")
public class Account implements java.io.Serializable {
	/*
	* Added insertable=false and updatable=false.
	* This means that this column will not be used in INSERT or UPDATE statements,
	* because its value is automatically generated by the database.
	*/
	@Id
	@GeneratedValue(generator = "UUID")
	@GenericGenerator(
	name = "UUID",
	strategy = "org.hibernate.id.UUIDGenerator"
	)
	@Column(name = "account_id", updatable = false, insertable = false, nullable = false)
	@JsonProperty("account_id")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private String account_id;
	@Column(name = "first_name")
	@JsonProperty("first_name")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private String first_name;
	@Column(name = "last_name")
	@JsonProperty("last_name")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private String last_name;
	@Column(name = "username")
	@JsonProperty("username")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private String username;
	@Column(name = "email")
	@JsonProperty("email")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private String email;
	@Column(name = "contact_number")
	@JsonProperty("contact_number")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private String contact_number;
	@Column(name = "password")
	@JsonProperty("password")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private String password;
	@Column(name = "user_type")
	@JsonProperty("user_type")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private String user_type;
	// Referenced Table: rating, Referenced Column: account_id
	@JsonIgnore
	@OneToMany(mappedBy = "account",cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.DETACH,CascadeType.REFRESH})
	private List<Rating> ratings;
	// Referenced Table: tables, Referenced Column: account_id
	@JsonIgnore
	@OneToMany(mappedBy = "account",cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.DETACH,CascadeType.REFRESH})
	private List<Tables> tabless;
	public Account() {
	}
	public Account(
	String account_id
	,
	String first_name
	,
	String last_name
	,
	String username
	,
	String email
	,
	String contact_number
	,
	String password
	,
	String user_type
	) {
		this.account_id = account_id;
		this.first_name = first_name;
		this.last_name = last_name;
		this.username = username;
		this.email = email;
		this.contact_number = contact_number;
		this.password = password;
		this.user_type = user_type;
		this.Init();
	}
	public void Init() {
		if(this.ratings==null) {
			this.ratings=new ArrayList<Rating>();
		}
		if(this.tabless==null) {
			this.tabless=new ArrayList<Tables>();
		}
	}
	public void setAccountId(String account_id) {
		this.account_id = account_id;
	}
	public String getAccountId() {
		return this.account_id;
	}
	public void setFirstName(String first_name) {
		this.first_name = first_name;
	}
	public String getFirstName() {
		return this.first_name;
	}
	public void setLastName(String last_name) {
		this.last_name = last_name;
	}
	public String getLastName() {
		return this.last_name;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getUsername() {
		return this.username;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getEmail() {
		return this.email;
	}
	public void setContactNumber(String contact_number) {
		this.contact_number = contact_number;
	}
	public String getContactNumber() {
		return this.contact_number;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getPassword() {
		return this.password;
	}
	public void setUserType(String user_type) {
		this.user_type = user_type;
	}
	public String getUserType() {
		return this.user_type;
	}
	public void setRating(List<Rating> ratings) {
		this.ratings = ratings;
	}
	public List<Rating> getRatings() {
		return this.ratings;
	}
	public void addRating(Rating rating) {
		if(this.ratings==null) {
			this.ratings=new ArrayList<Rating>();
		}
		this.ratings.add(rating);
		rating.setAccount(this);
	}
	public void setTables(List<Tables> tabless) {
		this.tabless = tabless;
	}
	public List<Tables> getTabless() {
		return this.tabless;
	}
	public void addTables(Tables tables) {
		if(this.tabless==null) {
			this.tabless=new ArrayList<Tables>();
		}
		this.tabless.add(tables);
		tables.setAccount(this);
	}
	@Override
	public String toString() {
		return "Account [" +
		"account_id"+
		"=" + StringConverter.toString(this.account_id)+
		","+
		"first_name"+
		"=" + StringConverter.toString(this.first_name)+
		","+
		"last_name"+
		"=" + StringConverter.toString(this.last_name)+
		","+
		"username"+
		"=" + StringConverter.toString(this.username)+
		","+
		"email"+
		"=" + StringConverter.toString(this.email)+
		","+
		"contact_number"+
		"=" + StringConverter.toString(this.contact_number)+
		","+
		"password"+
		"=" + StringConverter.toString(this.password)+
		","+
		"user_type"+
		"=" + StringConverter.toString(this.user_type)+
		"]";
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj){
			return true;
		}
		if (obj == null){
			return false;
		}
		if (getClass() != obj.getClass()){
			return false;
		}
		Account other = (Account) obj;
		return Objects.equals(this.account_id, other.account_id)
			&& Objects.equals(this.first_name, other.first_name)
			&& Objects.equals(this.last_name, other.last_name)
			&& Objects.equals(this.username, other.username)
			&& Objects.equals(this.email, other.email)
			&& Objects.equals(this.contact_number, other.contact_number)
			&& Objects.equals(this.password, other.password)
			&& Objects.equals(this.user_type, other.user_type)
			&& Objects.equals(this.ratings, other.ratings)
			&& Objects.equals(this.tabless, other.tabless);
	}
}