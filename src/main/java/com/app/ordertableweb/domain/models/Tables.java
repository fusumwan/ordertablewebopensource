package com.app.ordertableweb.domain.models;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Base64;
import java.sql.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Set;

import javax.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Immutable;
import org.hibernate.annotations.Subselect;
import org.hibernate.annotations.Synchronize;
import org.springframework.validation.annotation.Validated;
import com.app.ordertableweb.domain.utils.ByteConverter;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.springframework.format.annotation.DateTimeFormat;
import com.app.ordertableweb.domain.utils.StringConverter;

@Entity
@Table(name = "tables")
public class Tables implements java.io.Serializable {
	/*
	* Added insertable=false and updatable=false.
	* This means that this column will not be used in INSERT or UPDATE statements,
	* because its value is automatically generated by the database.
	*/
	@Id
	@GeneratedValue(generator = "UUID")
	@GenericGenerator(
	name = "UUID",
	strategy = "org.hibernate.id.UUIDGenerator"
	)
	@Column(name = "tables_id", updatable = false, insertable = false, nullable = false)
	@JsonProperty("tables_id")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private String tables_id;
	@Column(name = "number_of_sits")
	@JsonProperty("number_of_sits")
	@JsonFormat(shape = JsonFormat.Shape.NUMBER_INT)
	private Integer number_of_sits;
	@Transient // This annotation tells Hibernate not to map this property
	@JsonProperty("restaurant_id")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private String restaurant_id;
	@Column(name = "arrival_time")
	@JsonProperty("arrival_time")
	@JsonFormat(shape = JsonFormat.Shape.NUMBER_INT)
	private Integer arrival_time;
	@Transient // This annotation tells Hibernate not to map this property
	@JsonProperty("account_id")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private String account_id;
	@Transient // This annotation tells Hibernate not to map this property
	@JsonProperty("timeperiod_id")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private String timeperiod_id;
	// Foreign Key: tables_ibfk_1
	@JsonIgnore
	@ManyToOne(cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.DETACH,CascadeType.REFRESH})
	@JoinColumn(name = "restaurant_id", referencedColumnName = "restaurant_id")
	private Restaurant restaurant;
	// Foreign Key: tables_ibfk_2
	@JsonIgnore
	@ManyToOne(cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.DETACH,CascadeType.REFRESH})
	@JoinColumn(name = "account_id", referencedColumnName = "account_id")
	private Account account;
	// Foreign Key: tables_ibfk_3
	@JsonIgnore
	@ManyToOne(cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.DETACH,CascadeType.REFRESH})
	@JoinColumn(name = "timeperiod_id", referencedColumnName = "timeperiod_id")
	private Timeperiod timeperiod;
	public Tables() {
	}
	public Tables(
	String tables_id
	,
	Integer number_of_sits
	,
	Restaurant restaurant
	,
	Integer arrival_time
	,
	Account account
	,
	Timeperiod timeperiod
	) {
		this.tables_id = tables_id;
		this.number_of_sits = number_of_sits;
		this.restaurant = restaurant;
		this.restaurant_id = (this.restaurant!=null) ? this.restaurant.getRestaurantId() : null;
		this.arrival_time = arrival_time;
		this.account = account;
		this.account_id = (this.account!=null) ? this.account.getAccountId() : null;
		this.timeperiod = timeperiod;
		this.timeperiod_id = (this.timeperiod!=null) ? this.timeperiod.getTimeperiodId() : null;
		this.Init();
	}
	public void Init() {
	}
	public void setTablesId(String tables_id) {
		this.tables_id = tables_id;
	}
	public String getTablesId() {
		return this.tables_id;
	}
	public void setNumberOfSits(Integer number_of_sits) {
		this.number_of_sits = number_of_sits;
	}
	public Integer getNumberOfSits() {
		return this.number_of_sits;
	}
	public void setRestaurant(Restaurant restaurant) {
		this.restaurant = restaurant;
		this.restaurant_id = (this.restaurant!=null) ? this.restaurant.getRestaurantId() : null;
	}
	public Restaurant getRestaurant() {
		return this.restaurant;
	}
	public String getRestaurant_id() {
		this.restaurant_id = (this.restaurant!=null) ? this.restaurant.getRestaurantId() : null;
		return this.restaurant_id;
	}
	public void setArrivalTime(Integer arrival_time) {
		this.arrival_time = arrival_time;
	}
	public Integer getArrivalTime() {
		return this.arrival_time;
	}
	public void setAccount(Account account) {
		this.account = account;
		this.account_id = (this.account!=null) ? this.account.getAccountId() : null;
	}
	public Account getAccount() {
		return this.account;
	}
	public String getAccount_id() {
		this.account_id = (this.account!=null) ? this.account.getAccountId() : null;
		return this.account_id;
	}
	public void setTimeperiod(Timeperiod timeperiod) {
		this.timeperiod = timeperiod;
		this.timeperiod_id = (this.timeperiod!=null) ? this.timeperiod.getTimeperiodId() : null;
	}
	public Timeperiod getTimeperiod() {
		return this.timeperiod;
	}
	public String getTimeperiod_id() {
		this.timeperiod_id = (this.timeperiod!=null) ? this.timeperiod.getTimeperiodId() : null;
		return this.timeperiod_id;
	}
	@Override
	public String toString() {
		return "Tables [" +
		"tables_id"+
		"=" + StringConverter.toString(this.tables_id)+
		","+
		"number_of_sits"+
		"=" + StringConverter.toString(this.number_of_sits)+
		","+
		"=" + this.restaurant.toString()+
		","+
		"arrival_time"+
		"=" + StringConverter.toString(this.arrival_time)+
		","+
		"=" + this.account.toString()+
		","+
		"=" + this.timeperiod.toString()+
		"]";
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj){
			return true;
		}
		if (obj == null){
			return false;
		}
		if (getClass() != obj.getClass()){
			return false;
		}
		Tables other = (Tables) obj;
		return Objects.equals(this.tables_id, other.tables_id)
			&& Objects.equals(this.number_of_sits, other.number_of_sits)
			&& Objects.equals(this.restaurant, other.restaurant)
			&& Objects.equals(this.arrival_time, other.arrival_time)
			&& Objects.equals(this.account, other.account)
			&& Objects.equals(this.timeperiod, other.timeperiod);
	}
}